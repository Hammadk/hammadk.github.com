<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Hammad Khalid</title>
 <link href="http://hammad.ca/" rel="self"/>
 <link href="http://hammad.ca"/>
 <updated>2017-07-09T21:58:57-04:00</updated>
 <id>http://hammad.ca</id>
 <author>
   <name>Hammad Khalid</name>
   <email>hi@hammad.ca</email>
 </author>

 
 <entry>
   <title>Trends Watch</title>
   <link href="http://hammad.ca/projects/2016/02/15/trends-watch"/>
   <updated>2016-02-15T00:00:00-05:00</updated>
   <id>http://hammad.ca/projects/2016/02/15/trends-watch</id>
   <content type="html">&lt;p&gt;This app collects trending Google searches, tweets, movies,
Reddit and Instragram posts. I use this to keep track of current trends. You can try it our here:
&lt;a href=&quot;http://trendswatch.herokuapp.com&quot; target=&quot;_blank&quot;&gt;trendswatch.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/trends-watch-content.png&quot; alt=&quot;Let there be flash light&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a Rails app but there is a ton of fun stuff happening in the background. Every 5 minutes, a background jobs collects the latest trends from all across the web. After this, I generate a static page with this trends data on it. This static page is then uploaded to S3. Trends watch itself, just renders that S3 static page.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Automatically run Rails database migration after deploying to Heroku</title>
   <link href="http://hammad.ca/blog/2016/02/15/automatically-migrating-your-rails-app-on-heroku"/>
   <updated>2016-02-15T00:00:00-05:00</updated>
   <id>http://hammad.ca/blog/2016/02/15/automatically-migrating-your-rails-app-on-heroku</id>
   <content type="html">&lt;p&gt;Buildpacks are scripts that run after your app is deployed to Heroku. Heroku is
smart enough to figure out what buildpacks to use depending on your app. For
example, assets are automatically prepared when you deploy your Rails app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/buildpacks-per-platform.png&quot; alt=&quot;Heroku Buildpacks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For added functionality, Heroku lets you add additional buildpacks.
So, to automatically run any pending database migration after your Rails app
deploys:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to your app’s directory and run &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku buildpacks&lt;/code&gt; to see the list of
current buildpacks.&lt;/li&gt;
  &lt;li&gt;Add a rake tasks buildpack with: &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku buildpacks:add https://github.com/gunpowderlabs/buildpack-ruby-rake-deploy-tasks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Configure this buildpack: &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku config:set DEPLOY_TASKS='db:migrate cache:clear'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You are all done! Any pending migrations will automatically run the next
time you deploy to Heroku.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/buildpacks&quot; target=&quot;_blank&quot;&gt;Heroku Buildpacks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gunpowderlabs/buildpack-ruby-rake-deploy-tasks&quot; target=&quot;_blank&quot;&gt;Ruby rake buildpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Confirm before pushing to Git master branch</title>
   <link href="http://hammad.ca/blog/2015/03/08/confirm-before-pushing-to-master-branch"/>
   <updated>2015-03-08T00:00:00-05:00</updated>
   <id>http://hammad.ca/blog/2015/03/08/confirm-before-pushing-to-master-branch</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/git-push-force.jpg&quot; alt=&quot;git push force&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have heard horror stories about developers accidentally force pushing to the
master branch of their project. This can be very difficult to revert, but
luckily this can be avoided using a Git pre-push hook.&lt;/p&gt;

&lt;p&gt;A pre-push hook is just a script that lives in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/hooks/*&lt;/code&gt; directory.
It is run every time you push to your Git repository. I have edited the script
to prompt you for a confirmation before you push to the master branch. &lt;code class=&quot;highlighter-rouge&quot;&gt;Are you sure you want to push to &quot;master&quot; ? (y/n):&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To get this to work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add the code below to you project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/hooks/pre-hook&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Make the script executable with &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x .git/hooks/pre-hook&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Try this out my making a &lt;em&gt;minor&lt;/em&gt; change in one of the directories above and
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;(Optional) If you want this hook in all git projects by default, try out &lt;a href=&quot;http://stackoverflow.com/a/8842663&quot; target=&quot;_blank&quot;&gt;git templating.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code:&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0a196dd1ac5ad971df1a.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>LookRook: A Rails app for finding the best stylists in your hometown</title>
   <link href="http://hammad.ca/projects/2014/02/01/lookrook"/>
   <updated>2014-02-01T00:00:00-05:00</updated>
   <id>http://hammad.ca/projects/2014/02/01/lookrook</id>
   <content type="html">&lt;p&gt;This idea for this app is really simple; make it super easy for stylists to upload pictures of their work online (and establish their portfolio). On the other hand, make it really easy for users to find the best stylists in their home town, based on the photos uploaded by the stylists.&lt;/p&gt;

&lt;p&gt;For example, If someone wants to get a new &lt;em&gt;layered&lt;/em&gt; haircut, they’d look for images in the layered category and find images from different stylists. They are also able to sort these images based on their popularity, and the location of the stylist.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lookrook.png&quot; alt=&quot;LED&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wordpress to Jekyll</title>
   <link href="http://hammad.ca/blog/2012/09/02/Wordpress-to-Jekyll"/>
   <updated>2012-09-02T00:00:00-04:00</updated>
   <id>http://hammad.ca/blog/2012/09/02/Wordpress-to-Jekyll</id>
   <content type="html">&lt;p&gt;I movedthis website from WordPress to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll is a Ruby static-site generator which turns your text files into related HTML files. So far, I love it. Since all the files that Jekyll generates are just HTML files, I don’t have to worry about a database or any sort of maintenance issues. Even better, I can now host this blog on Github, or Amazon S3, for free.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/wordpressvsjekyll.jpg&quot; alt=&quot;Wordpress vs Jekyll&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;small&gt;Theatrical Poster from the Library of Congress, Image Library&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyone who has used WordPress, or any other  CMS platform, for a personal site for a while understands that it requires frequent maintenance. While WordPress is great at many tasks, the frequent updates and security issues get annoying after a while. On top of that, you can’t simply edit files in your text editor. Recently I stumbled into Jekyll which is the Ruby static site generator.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;One of my main concerns while using WordPress was backing up data. Since Jekyll simply works with text files, this means that I can now keep these files &lt;em&gt;anywhere&lt;/em&gt; I like. So I keep all the files for this website in a Dropbox folder so that all changes automagically get synced across different computers –  this is awesome! When working with Jekyll you create and edit simple text files and, based on your templates, Jekyll processes them and turns them into interconnected html files. All of the generated files are kept in a folder which can be deployed onto Github or your own private server.&lt;/p&gt;

&lt;h3 id=&quot;deploying&quot;&gt;Deploying&lt;/h3&gt;

&lt;p&gt;Editing and deploying the changes to this blog are probably my favorite reasons for switching to Jekyll. Once I have edited the text files that I need, I add these changes to git and push to the git remote server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Edit the files and have Jekyll update the deployment folder
&lt;/span&gt;
jekyll build
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
git add .
git commit
git push &lt;span class=&quot;c&quot;&gt;#That's it!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While WordPress and similar platforms are great for most users, those that prefer the peace of mind of working with simple text files should check out &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sosmos: An RSS feed aggregator</title>
   <link href="http://hammad.ca/projects/2011/12/28/sosmos"/>
   <updated>2011-12-28T00:00:00-05:00</updated>
   <id>http://hammad.ca/projects/2011/12/28/sosmos</id>
   <content type="html">&lt;p&gt;I meant for this to be a personal home page but planned on later expanding it to allow others to pick their own RSS feeds. In mid 2010 I had a few thousand regular users but eventually there was a sharp decline because of better web apps like Netvibes.com and Google Reader.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sosmos_bg.jpg&quot; alt=&quot;LED&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sosmos.com, in web terms, has since been sunset. If you are interested in a great app that lets you pull content from different websites I recommend &lt;a title=&quot;NetVibes&quot; href=&quot;http://www.netvibes.com/en&quot; target=&quot;_blank&quot;&gt;Netvibes&lt;/a&gt;!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cobra : A flexible gaming interface</title>
   <link href="http://hammad.ca/projects/2011/12/27/cobra"/>
   <updated>2011-12-27T00:00:00-05:00</updated>
   <id>http://hammad.ca/projects/2011/12/27/cobra</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/cobra_300x459.jpg&quot; alt=&quot;Flexible screen image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was a super exciting project and I got to work with &lt;a href=&quot;http://toastygames.com/parallax/&quot;&gt;Zi Ye&lt;/a&gt; on different iterations of it —  imagine my excitement when &lt;a href=&quot;http://news.cnet.com/8301-17938_105-20003598-1.html&quot;&gt;CNET&lt;/a&gt; published an article about our project. You can read the full paper &lt;a href=&quot;/assets/pdf/cobra.pdf&quot;&gt;here&lt;/a&gt;, or on ACM &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1754154&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Abstract from the paper:&lt;/p&gt;

&lt;blockquote&gt;
We discuss Cobra, a handheld peripheral for computer games that applies flexible display design principles to provide a highly intuitive, mobile gaming experience. Cobra is a flexible cardboard interface that uses bends as input to the gaming device. Images are provided through projection with a shoulder-mounted pico projector. In this paper, we will present our prototype, the motives behind it, and its immediate applications.
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>CEEC: Environmental conference</title>
   <link href="http://hammad.ca/projects/2011/12/26/ceec"/>
   <updated>2011-12-26T00:00:00-05:00</updated>
   <id>http://hammad.ca/projects/2011/12/26/ceec</id>
   <content type="html">&lt;p&gt;I was a member of the group that organized CEEC in 2010 and I developed their web presence for this that year. CEEC 2010 was an amazing opportunity to meet entrepreneurs in the energy field an I think it may have been responsible for my save-the-world-esque ambitions.&lt;/p&gt;

&lt;p&gt;I setup an app that accepted payments from Paypal for online registration and created a website that I had been obsessing over for a while.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ceecSnapshot.jpg&quot; alt=&quot;LED&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
